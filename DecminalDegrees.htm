<!DOCTYPE html PUBLIC '-//W3C//DTD XHTML 1.0 Transitional//EN'
'http://www.w3.org/TR/xhtmll/DTD/xhtmll-transitional.dtd'>

<html xmlns='http://www.w3.org/1999/xhtml'>

    <head>
        <title>Coordinate Degrees Converter</title>
        <!--
            Decimal Lat/Lon converter
        
            This is a Hypertag.js app which converts plaintext to escaped strings-
            and back again.

            d.swartzendruber, c2014
            MIT License: http://opensource.org/licenses/MIT   
        -->
    
        <!-- hypertag components -->
        <link href="http://cdn.hypertag.io/verbs.css" media="all" rel="stylesheet" type="text/css"></link>
        <script src="http://cdn.hypertag.io/Hypertag.min.js" type="text/javascript"></script>
        <script url="http://cdn.hypertag.io/builtins.hyp" type="library/hypertag"></script>

       
        <style>
            html{padding:0; margin: 0;}
            body{padding:0; margin: 0;}
            .nopad{padding:0; margin: 0;}
            .wrapx{ overflow-x:none !important;}
        </style>
    
    </head>

    <script id="LatLonDegreesConverter" type="text/hypertag">
        <!-- markup shml -->

        // flag to tell us if the user has touched the text area yet
        isfirsttime:true,

        // Clear textarea
        clearAreaForFirstTime:function(clearanyway){
            if(self.isfirsttime || clearanyway){
                self.$named('convertinput').val("");
                self.isfirsttime = false;
            }
        },

        // Return a decimal degree from either d/m/s or d/m.m string.
        decimalDegreesFromString:function(coordinate){
            if(coordinate.constructor == String){
                // An ugly but thorough line which removes spaces and newlines and splits a string on all possible LatLong coord delimiters
                var subunits = coordinate.replace(/\s|\n/gi,"").split(/[\u0307|\u00B0|\u0358|\u0374|\u030D|\u0329|\u0315|\u0060|\u0022|\u00B4|\u00B7\u02BA|\u02B9|\u02C8|\u02EE|\u0309|\u0315|\u0314|\u0313|\u0312\u031B|\u033E|\u0348|\u0374|\u0027]/gi);
        
                // Convert all strings to floats, flipping sign for minutes and seconds as nessecary
                for(var i = 0; i !== subunits.length; i++){
                    subunits[i] = parseFloat(subunits[i]);
                    if( i !== 0 && subunits[0] {- 0 ){
                        subunits[i] = subunits[i] * -1;
                    }
                }
        
                // convert and add minutes
                if(subunits[1])
                    subunits[0] = subunits[0] + subunits[1]/60;
        
                // convert and add seconds
                if(subunits[2])
                    subunits[0] = subunits[0] + subunits[2]/3600;
         
                return subunits[0];
            }
            // If it's a number we could convert back into d/m/s
            // else if(coordinate.constructor == Number){}
            else return false;
        },

        // Given a LatLong string delimited by a comma, return an object {lat,lon,long,x,y}
        // long,x,y are just references to lon,lon,lat
        LatLonStringToDecimalDegrees:function(latlon){
            latlon = latlon.split(/\u002C|\u002F|\u002F/gi);// split on comma, backslash, or fwd slash
            latlon = {
                lat: self.decimalDegreesFromString(latlon[0]), 
                lon: self.decimalDegreesFromString(latlon[1])
            };
            latlon.long = latlon.lon;
            latlon.x = latlon.lon;
            latlon.y = latlon.lat;
            return latlon;
        },
    
        // Our main conversion function.
        // This grabs the string from an input field and replaces it with output from one of the two functions above.
        convertInputCoord:function(toplaintext){
            // fetch user text from inputarea
            var inputtext = self.$named('convertinput').val();

            if(inputtext !== ""){
                // if there's a character denoting two coordinates
                if(inputtext.match(/\u002C|\u002F|\u002F/gi)){
                    // Convert the coordinates from the input field val
                    var coords = self.LatLonStringToDecimalDegrees(inputtext);
                
                    // if the checkbox denoting the Lat,Long pair should be reversed is checked
                    if(self.$named('xy').is(':checked')){
                        self.$named('convertinput').val(coords.lon.toString().concat( ",", coords.lat.toString()));
                    }
                    else{
                        self.$named('convertinput').val(coords.lat.toString().concat( ",", coords.lon.toString()));
                    }
                }
                // if no lat/lon delimiters we assume it was a single geo x or y coordinate: not both 
                else{
                    if(inputtext.match(/\u002C|\u002F|\u002F/gi)){
                        self.$named('convertinput').val(self.decimalDegreesFromString(inputtext));
                    }
                }
            }
            
            // set the flag that prevents click-clearing the input
            self.isfirsttime = false;
        }

        <view class="center"
              width="%%{self.parent.width}"
              height="%%{self.parent.height}">
                
            <div class="width100" name="buttoncontainer">

        
                <input type="button" 
                       class="button width33 rightpadded"
                       onclick="self.root.clearAreaForFirstTime(true)"
                       value="Clear">        
                               
                <input type="button" 
                       class="button width33 rightpadded"
                       onclick="self.root.convertInputCoord()"
                       value="To Degrees Decimal">
                    
                <span style="font-family:Arial;font-size:1em;"
                      class="width33 padded center lightskyblue rounded"
                      title='Many systems (i.e. GeoJSON) require coordinates in x,y format but Lat/Long are actually y,x.  This option reverses the output. Clicking [To Decimal] repeatedly will flip your coords back and forth.'>

                    <input type="checkbox" 
                           name="xy"
                           class="leftpadded">
                    
                    Long / Lat (flip to x,y)
            
            <view class="rel" width="%%{self.parent.width}" 
                height="%%{self.parent.height;;value-self.offsetTop}" 
                traits="SizedToWindow" 
                name="convertinputview">
        
                // Hitch our textarea so stays securely in the window: 
                // overflow seems to interfere with key capture making it hard to type
                //onHeight:"%%{self.height ;; self.$child('convertinput').height(value*0.95 , console.log(self.$child('convertinput')))}",
                onWidth:"%%{self.width ;; self.$child('convertinput').width(value*0.95)}",
                //onLeft::"%%{self.width ;; self.$child('convertinput').left(1)}",
                //onTop::"%%{self.height ;; self.$child('convertinput').top( self.$child('convertinput').offsetTop - 4)}",
        
                __ready__:function(){
                    self.$child('convertinput').val('Enter a Lat,Long coordinate pair or a single coordinate. '); 
                }
        
                <input type="text" 
                       class="left clickable margined"
                       name="convertinput"
                       __click__="self.root.clearAreaForFirstTime()">
    </script>

    <script id="SizedToWindow" type="text/hypertag">
        <!-- markup shml -->
        __init__:function(){
            var resize = function(){
                self.set('width', window.innerWidth-5);
                self.set('height', window.innerHeight-3);
            };

            $(window).bind("resize", resize);

            Hypertag.GUI.focus.setLayer(self);
            Hypertag.GUI.focus.setWindow(self);

            resize();
        }
    </script>

    <body>
        <div class="hypertag" 
            template="LatLonDegreesConverter" 
            traits="SizedToWindow"/>
    </body>
</html>
